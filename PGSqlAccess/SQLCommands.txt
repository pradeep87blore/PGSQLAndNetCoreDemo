The following SQL commands were used to create the DB and some sample tables:

Note that these SQL commands were created using the PGADMIN4 GUI options. 

CREATE DATABASE "Patient"
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    CONNECTION LIMIT = -1;

COMMENT ON DATABASE "Patient"
    IS 'Patient info DB';
	
	
-----------------------------

CREATE TABLE public."PatientInfo"
(
    "PatientID" uuid NOT NULL,
    "PhysicianId" uuid NOT NULL,
    "FirstAdmissionDate" date NOT NULL,
    "LatestVisitDate" date,
    "InsuranceId" uuid,
    "PersonalInfoId" uuid NOT NULL,
    CONSTRAINT "UniquePatId" UNIQUE ("PatientID"),
    CONSTRAINT "UniqueInsuranceId" UNIQUE ("InsuranceId")
)
WITH (
    OIDS = FALSE
);

ALTER TABLE public."PatientInfo"
    OWNER to postgres;
COMMENT ON TABLE public."PatientInfo"
    IS 'Info about patients';
	
------------------------------	


CREATE TABLE public."InsuranceInfo"
(
    "InsuranceId" uuid NOT NULL,
    "PatientId" uuid NOT NULL,
    "InsurancePlan" character varying(250) NOT NULL,
    CONSTRAINT "InsuranceIdPrimary" PRIMARY KEY ("InsuranceId"),
    CONSTRAINT "UniqueInsuranceId" UNIQUE ("InsuranceId")
,
    CONSTRAINT "PatientIdForiegnKey" FOREIGN KEY ("PatientId")
        REFERENCES public."PatientInfo" ("PatientID") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "InsuranceIdForiegnKey" FOREIGN KEY ("InsuranceId")
        REFERENCES public."PatientInfo" ("InsuranceId") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
WITH (
    OIDS = FALSE
);

ALTER TABLE public."InsuranceInfo"
    OWNER to postgres;
	
-------------------------------

CREATE TABLE public."PatientDetails"
(
    "Name" character varying(50) NOT NULL,
    "PatientId" uuid NOT NULL,
    "PhoneNum" integer,
    "EmailId" character varying(50),
    "Address" character varying(250),
    CONSTRAINT "PatientIdPK" FOREIGN KEY ("PatientId")
        REFERENCES public."PatientInfo" ("PatientID") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
WITH (
    OIDS = FALSE
);

ALTER TABLE public."PatientDetails"
    OWNER to postgres;
COMMENT ON TABLE public."PatientDetails"
    IS 'Contact and other details of the Patient';

--------------------------------	
	
	
-- PROCEDURE: public.spretrievepatient(uuid)

-- DROP PROCEDURE public.spretrievepatient(uuid);

CREATE OR REPLACE PROCEDURE public.spretrievepatient(
	uuid)
LANGUAGE 'plpgsql'

AS $BODY$
BEGIN
	SELECT "Name", "PatientId", "PhoneNum", "EmailId", "Address"
	FROM public."PatientDetails"
	WHERE "PatientId" = $1;
	COMMIT;
END;
$BODY$;


---------------------------------
-- PROCEDURE: public.spcreatepatient(uuid, character varying, integer, character varying, character varying, uuid, character varying, uuid)

-- DROP PROCEDURE public.spcreatepatient(uuid, character varying, integer, character varying, character varying, uuid, character varying, uuid);

CREATE OR REPLACE PROCEDURE public.spcreatepatient(
	patid uuid,
	patname character varying,
	phonenum integer,
	email character varying,
	address character varying,
	insuranceid uuid,
	insuranceplan character varying,
	physicianid uuid)
LANGUAGE 'plpgsql'

AS $BODY$
BEGIN

	INSERT INTO public."PatientInfo"(
		"PatientID", "PhysicianId", "FirstAdmissionDate", "LatestVisitDate", "InsuranceId", "PersonalInfoId")
		VALUES (patId, physicianId, NOW(), NOW(), insuranceId, patId);	
	
	INSERT INTO public."PatientDetails"(
		"Name", "PatientId", "PhoneNum", "EmailId", "Address")
		VALUES (patName, patId, phoneNum, email, address);
	
	INSERT INTO public."InsuranceInfo"(
		"InsuranceId", "PatientId", "InsurancePlan")
		VALUES (insuranceId, patId, insurancePlan);
	
	
	COMMIT;
END;
$BODY$;

-------------------------------

-- PROCEDURE: public.sppatientcount(bigint)

-- DROP PROCEDURE public.sppatientcount(bigint);

CREATE OR REPLACE PROCEDURE public.sppatientcount(INOUT counter bigint)
LANGUAGE plpgsql
AS $$
BEGIN
    select COUNT(*) into counter FROM public."PatientDetails";
END;
$$;	  

--> Invoking this SP from the PGADMIN:
DO $$
DECLARE counter bigint := 0;
BEGIN
  CALL sppatientcount(counter);
  RAISE NOTICE 'counter = %', counter;  -- prints actual patient count
END
$$;

-------------------

-- PROCEDURE: public.spdeleteallpatients()

-- DROP PROCEDURE public.spdeleteallpatients();

CREATE OR REPLACE PROCEDURE public.spdeleteallpatients(
	)
LANGUAGE 'plpgsql'

AS $BODY$
BEGIN
	TRUNCATE public."PatientDetails" CASCADE;  -- cascade removes dependent entries from other tables too
	TRUNCATE public."PatientInfo" CASCADE;
	TRUNCATE public."InsuranceInfo" CASCADE;
END;
$BODY$;

-------------------


-- FUNCTION: public.spselectpatients(uuid)

-- DROP FUNCTION public.spselectpatients(uuid);

CREATE OR REPLACE FUNCTION public.spselectpatients(
	patientid uuid)
    RETURNS refcursor
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$
    DECLARE
      ref refcursor; -- Declare the cursor variable
    BEGIN
      OPEN ref FOR 
	  SELECT "Name", public."PatientDetails"."PatientId", "PhoneNum", 
		"EmailId", "Address", "PhysicianId", "FirstAdmissionDate", 
		"LatestVisitDate", public."InsuranceInfo"."InsuranceId", "InsurancePlan"
		FROM public."PatientDetails", public."PatientInfo", public."InsuranceInfo"
		where "PatientDetails"."PatientId" = patientid 
		and 
		"PatientInfo"."PatientID" = patientid 
		and
		"InsuranceInfo"."PatientId" = patientid; -- Open the required cursror
      RETURN ref;
    END;
    $BODY$;

ALTER FUNCTION public.spselectpatients(uuid)
    OWNER TO postgres;


